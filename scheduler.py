import logging
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from flask import Flask, current_app
import pytz
from app.utils import create_db_connection
from app.vats import change_numbers_periodically
from app.callcenter import partial_sync_data
from app.extensions import socketio
from redis import Redis
from apscheduler.jobstores.redis import RedisJobStore
from app.models.news import News

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("Scheduler")

app = Flask(__name__)
app.config.from_object("app.config")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RedisJobStore (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º db=1)
jobstores = {
    'default': RedisJobStore(host='localhost', port=6379, db=1)
}

moscow_tz = pytz.timezone('Europe/Moscow')
scheduler = BackgroundScheduler(jobstores=jobstores, timezone=moscow_tz)

def change_numbers_periodically_with_context():
    with app.app_context():
        try:
            logger.debug("–ù–∞—á–∏–Ω–∞–µ–º —Å–º–µ–Ω—É –Ω–æ–º–µ—Ä–æ–≤.")
            change_numbers_periodically()
            logger.info("–°–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–æ–º–µ—Ä–æ–≤: {e}", exc_info=True)

def auto_sync_data_job():
    with app.app_context():
        try:
            logger.debug("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü—ã.")
            partial_sync_data()
            logger.info("‚úÖ –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)

def publish_scheduled_news_job():
    with app.app_context():
        try:
            logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
            News.publish_scheduled_news()
            logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}", exc_info=True)

def initialize_scheduler():
    global scheduler

    logger.info("üõ† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")

    existing_jobs = scheduler.get_jobs()
    logger.info(f"üìå –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {[job.id for job in existing_jobs]}")

    # –ó–∞–¥–∞—á–∞: —á–∞—Å—Ç–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç, —Ç–æ–ª—å–∫–æ —Å 9 –¥–æ 21 —á–∞—Å–æ–≤
    if not scheduler.get_job("auto_sync_data_job"):
        logger.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.")
        scheduler.add_job(
            func=auto_sync_data_job,
            trigger=CronTrigger(minute='*/15', hour='9-21', timezone=moscow_tz),
            id="auto_sync_data_job",
            replace_existing=True
        )
        logger.info("‚úÖ –ó–∞–¥–∞—á–∞ auto_sync_data_job –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.")

    # –ó–∞–¥–∞—á–∞: —Å–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–æ–≤, –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π —á–∞—Å –Ω–∞ 59-–π –º–∏–Ω—É—Ç–µ —Å 9 –¥–æ 21 —á–∞—Å–æ–≤
    if not scheduler.get_job("change_numbers_periodically_with_context"):
        logger.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å–º–µ–Ω—ã –Ω–æ–º–µ—Ä–æ–≤.")
        scheduler.add_job(
            func=change_numbers_periodically_with_context,
            trigger=CronTrigger(minute='59', hour='9-21', timezone=moscow_tz),
            id="change_numbers_periodically_with_context",
            replace_existing=True
        )
        logger.info("‚úÖ –ó–∞–¥–∞—á–∞ change_numbers_periodically_with_context –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.")

    # –ó–∞–¥–∞—á–∞: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    if not scheduler.get_job("publish_scheduled_news_job"):
        logger.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.")
        scheduler.add_job(
            func=publish_scheduled_news_job,
            trigger=CronTrigger(minute='*', timezone=moscow_tz),
            id="publish_scheduled_news_job",
            replace_existing=True
        )
        logger.info("‚úÖ –ó–∞–¥–∞—á–∞ publish_scheduled_news_job –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.")

    scheduler.start()
    logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")

if __name__ == "__main__":
    initialize_scheduler()
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç. –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á...")
    try:
        while True:
            pass  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç—ã —à–µ–¥—É–ª–µ—Ä–∞
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
        scheduler.shutdown()
