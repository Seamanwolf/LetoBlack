{% extends "base.html" %}

{% block title %}Управление персоналом{% endblock %}
{% block page_title %}Управление персоналом{% endblock %}

{% block extra_css %}
<style>
  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f8f9fa;
    font-size: 0.85rem;
    padding-left: 250px; /* Добавляем отступ слева для боковой панели */
  }
  
  /* Стили для кнопок в модальных окнах */
  .modal .btn {
    padding: 0.25rem 0.5rem !important;
    font-size: 0.875rem !important;
    height: auto !important;
    min-height: auto !important;
  }
  
  /* Стили для кнопок фильтров и добавления сотрудника */
  .btn-group-sm .btn-sm {
    padding: 0.25rem 0.5rem !important;
    font-size: 0.875rem !important;
    height: auto !important;
    min-height: auto !important;
  }
  
  /* Стили для боковой панели */
  .sidebar {
    position: fixed;
    left: 0;
    top: 0;
    bottom: 0;
    width: 250px;
    background: white;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
    padding: 20px;
    z-index: 1000;
  }

  .sidebar .nav-link {
    display: flex;
    align-items: center;
    padding: 15px;
    color: #6c757d;
    text-decoration: none;
    transition: all 0.3s;
  }

  .sidebar .nav-link i {
    font-size: 1.2rem;
    margin-right: 10px;
  }

  .sidebar .nav-link.active {
    color: #3498db;
    background: rgba(52, 152, 219, 0.1);
    border-radius: 8px;
  }
  
  /* Стили для верхнего меню */
  .nav-menu {
    background-color: white;
    padding: 0 1.2rem;
    border-radius: 12px;
    display: flex;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.03);
    margin-bottom: 2rem;
    border-bottom: 2px solid #dee2e6;
    align-items: center;
  }

  .nav-menu a {
    color: #6c757d;
    font-weight: 500;
    padding: 1rem 1.2rem;
    margin-right: 1.2rem;
    display: flex;
    align-items: center;
    text-decoration: none;
    transition: all 0.2s ease;
  }

  .nav-menu a:hover {
    color: #3498db;
    background-color: rgba(52, 152, 219, 0.05);
  }

  .nav-menu a.active {
    color: #3498db;
    border-bottom: 3px solid #3498db;
    font-weight: 600;
  }

  .nav-menu a i {
    margin-right: 0.7rem;
    font-size: 1.1rem;
  }
  
  /* Основной контент */
  .main-content {
    width: calc(100% - 240px) !important;
    margin-left: 240px !important;
    padding: 20px !important;
  }
  
  /* Стили для карточек статистики */
  .stat-card {
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    padding: 20px;
    margin-bottom: 20px;
    background: white;
    transition: transform 0.3s;
  }
  
  .stat-card:hover {
    transform: translateY(-5px);
  }
  
  .stat-card .stat-title {
    font-size: 1rem;
    color: #7f8c8d;
    margin-bottom: 10px;
  }
  
  .stat-card .stat-value {
    font-size: 2rem;
    font-weight: 700;
    color: #2c3e50;
  }
  
  .stat-card .stat-icon {
    float: right;
    font-size: 2.5rem;
    opacity: 0.2;
    color: #3498db;
  }
  
  /* Стили для отделов */
  .department-section {
    background: white;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    margin-bottom: 20px;
    overflow: hidden;
  }
  
  .department-header {
    background-color: #f8f9fa;
    padding: 15px 20px;
    border-bottom: 1px solid #e9ecef;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: 600;
    cursor: pointer;
  }
  
  .department-header .badge {
    background-color: #3498db;
    color: white;
    padding: 5px 10px;
    border-radius: 50px;
    font-size: 0.8rem;
  }
  
  .department-header .department-controls {
    display: flex;
    gap: 10px;
    align-items: center;
  }
  
  .department-header .department-controls i {
    cursor: pointer;
    color: #6c757d;
    transition: color 0.3s;
  }
  
  .department-header .department-controls i:hover {
    color: #3498db;
  }
  
  /* Таблица сотрудников */
  .table th, .table td {
    text-align: center;
    vertical-align: middle;
  }
  
  /* Узкие колонки для ID и Статус */
  .table th:nth-child(1), .table td:nth-child(1) {
    width: 5%;
  }
  
  .table th:nth-child(2), .table td:nth-child(2) {
    width: 5%;
  }
  
  /* Остальные колонки с равной шириной */
  .table th:nth-child(3), .table td:nth-child(3),
  .table th:nth-child(4), .table td:nth-child(4),
  .table th:nth-child(5), .table td:nth-child(5),
  .table th:nth-child(6), .table td:nth-child(6),
  .table th:nth-child(7), .table td:nth-child(7) {
    width: 18%;
  }
  
  .employee-row {
    transition: background-color 0.2s;
  }
  
  .employee-row:hover {
    background-color: #f8f9fa;
  }
  
  .manager-row {
    background-color: #ffebcc !important;
  }
  
  .leader-row {
    background-color: #e6f7ff !important;
    font-weight: 600;
  }
  
  .deputy-row {
    background-color: rgba(52, 152, 219, 0.05) !important;
  }
  
  .employee-status {
    display: inline-block;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    margin-right: 5px;
  }
  
  .status-online {
    background-color: #2ecc71;
  }
  
  .status-offline {
    background-color: #e74c3c;
  }
  
  .edit-icon, .fire-icon, .delete-icon {
    cursor: pointer;
    margin-right: 10px;
    font-size: 1.1rem;
    transition: color 0.2s;
  }
  
  .edit-icon {
    color: #3498db;
  }
  
  .fire-icon {
    color: #e74c3c;
  }
  
  .delete-icon {
    color: #95a5a6;
  }
  
  .edit-icon:hover {
    color: #2980b9;
  }
  
  .fire-icon:hover {
    color: #c0392b;
  }
  
  .delete-icon:hover {
    color: #7f8c8d;
  }
  
  /* Поиск и фильтры */
  .search-box {
    position: relative;
    margin-bottom: 20px;
  }
  
  .search-box i {
    position: absolute;
    left: 15px;
    top: 50%;
    transform: translateY(-50%);
    color: #95a5a6;
  }
  
  .search-box input {
    padding-left: 40px;
    border-radius: 50px;
    border: 1px solid #e9ecef;
  }
  
  .filters {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
    flex-wrap: wrap;
  }
  
  .filter-btn {
    border: none;
    background-color: white;
    border-radius: 50px;
    padding: 6px 12px;
    font-size: 0.85rem;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    transition: all 0.3s;
  }
  
  .filter-btn:hover, .filter-btn.active {
    background-color: #3498db;
    color: white;
  }

  /* Select2 кастомные стили */
  .select2-container--bootstrap-5 .select2-selection {
    border-radius: 8px;
    border: 1px solid #ced4da;
    font-size: 0.85rem;
    height: calc(1.5em + 0.5rem + 2px) !important;
  }
  .select2-container--bootstrap-5 .select2-selection--multiple .select2-selection__choice {
    background-color: #3498db;
    border-color: #3498db;
    color: #fff;
    font-size: 0.85rem;
    padding: 0.2rem 0.4rem;
    margin: 3px;
    height: calc(1.5em + 0.15rem) !important;
  }
  .select2-container--bootstrap-5 .select2-selection--multiple .select2-selection__choice__remove {
    padding: 0 3px;
  }
  .select2-container--bootstrap-5 .select2-dropdown {
    border-radius: 8px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    font-size: 0.85rem;
  }

  /* Стили для поля логина */
  #systemLoginContainer {
    background-color: #fff;
    padding: 5px;
    margin-bottom: 15px;
  }
  
  #systemLoginContainer label {
    font-weight: bold;
    color: #1890ff;
  }
  
  #systemLoginContainer input {
    background-color: #fff;
    border: 1px solid #1890ff;
    font-weight: bold;
    color: #1890ff;
  }
  
  #editSystemLogin {
    display: block !important;
    font-weight: bold;
  }

  /* Стили для модальных окон */
  .modal {
    overflow-y: auto !important;
    background-color: rgba(0, 0, 0, 0.5) !important;
    z-index: 1050 !important;
  }

  .modal-content {
    border: none;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    opacity: 1 !important;
    background-color: #fff !important;
    z-index: 1055 !important;
  }

  .modal-backdrop {
    opacity: 0.5 !important;
    background-color: rgba(0, 0, 0, 0.5) !important;
    z-index: 1045 !important;
  }

  .modal-dialog {
    z-index: 1055 !important;
    opacity: 1 !important;
    margin: 1.75rem auto !important;
  }

  .modal-body {
    background-color: #fff !important;
    opacity: 1 !important;
    color: #212529 !important;
  }

  .modal-header, .modal-footer {
    background-color: #f8f9fa;
    border-color: #dee2e6;
  }

  /* Стили для логина без рамки */
  .login-highlight {
    color: #0d6efd;
    font-weight: 600;
    background: none;
    border: none !important;
    padding: 0;
    box-shadow: none !important;
    outline: none !important;
  }

  /* Улучшения для модального окна */
  .modal {
    background-color: rgba(0, 0, 0, 0.4);
    z-index: 1050;
  }
  .modal-content {
    background-color: #fff;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
    z-index: 1051;
  }
  .modal-backdrop {
    z-index: 1049;
  }

  /* Стили для модального окна предупреждения */
  #loginWarningModal .modal-content {
    border-left: 5px solid #ffc107;
  }
  
  /* Стили для руководителей отделов */
  .leader-row {
    background-color: #e3f2fd !important;
    font-weight: 500;
  }
  
  .leader-row td {
    font-weight: 500;
  }
  
  /* Стили для кнопок управления отделами */
  .department-controls {
    display: flex;
    gap: 8px;
    align-items: center;
  }
  
  .move-up, .move-down, .toggle-department, .move-department-up, .move-department-down, .collapse-department {
    background: none;
    border: none;
    padding: 4px 8px;
    cursor: pointer;
    color: #666;
    transition: color 0.2s;
  }
  
  .move-up:hover, .move-down:hover, .toggle-department:hover, 
  .move-department-up:hover, .move-department-down:hover, .collapse-department:hover {
    color: #2196f3;
  }
  
  .department-section {
    margin-bottom: 16px;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
  }
  
  .department-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px;
    background-color: #f5f5f5;
    border-bottom: 1px solid #e0e0e0;
  }
  
  .department-content {
    padding: 12px;
  }
  
  /* Стили для свернутого состояния */
  .department-section.collapsed .department-content {
    display: none;
  }
  
  .department-section.collapsed .toggle-department i {
    transform: rotate(180deg);
  }
  
  /* Стили для логина */
  .login-field {
    color: #0d6efd !important;
    font-weight: 500 !important;
    background: transparent !important;
    border: none !important;
    outline: none !important;
    box-shadow: none !important;
    padding: 0.375rem 0.75rem !important;
  }
  
  .login-field:focus {
    border: none !important;
    outline: none !important;
    box-shadow: none !important;
    background: rgba(13, 110, 253, 0.1) !important;
  }
  
  /* Стили для модального окна предупреждения */
  .warning-modal {
    display: none;
    position: fixed;
    z-index: 1060;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
  }
  
  .warning-modal-content {
    background-color: #fff;
    margin: 15% auto;
    padding: 20px;
    border-radius: 4px;
    width: 400px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }
  
  .warning-modal-header {
    margin-bottom: 15px;
  }
  
  .warning-modal-title {
    color: #f44336;
    font-size: 18px;
    font-weight: 500;
  }
  
  .warning-modal-body {
    margin-bottom: 20px;
  }
  
  .warning-modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
  }
  
  .warning-btn {
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
  }
  
  .warning-btn-cancel {
    background-color: #f5f5f5;
    border: 1px solid #e0e0e0;
    color: #666;
  }
  
  .warning-btn-continue {
    background-color: #f44336;
    border: none;
    color: #fff;
  }

  .department-head {
    background-color: #e3f2fd !important;
  }

  .department-controls {
    display: flex;
    gap: 10px;
    align-items: center;
  }

  .department-controls button {
    padding: 5px 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background: white;
    cursor: pointer;
  }

  .department-controls button:hover {
    background: #f5f5f5;
  }

  #loginWarningModal {
    display: none;
    position: fixed;
    z-index: 1060;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
  }

  .warning-modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 500px;
    border-radius: 5px;
  }

  .warning-modal-header {
    margin-bottom: 15px;
  }

  .warning-modal-footer {
    margin-top: 15px;
    text-align: right;
  }

  /* Стили для поля логина */
  .login-field {
    color: #0d6efd !important;
    font-weight: 500 !important;
    background: transparent !important;
    border: none !important;
    outline: none !important;
    box-shadow: none !important;
    padding: 0.375rem 0.75rem !important;
  }

  .login-field:focus {
    border: none !important;
    outline: none !important;
    box-shadow: none !important;
    background: rgba(13, 110, 253, 0.1) !important;
  }

  /* Стили для модального окна */
  .modal-backdrop {
    opacity: 0.5;
  }

  .modal-content {
    box-shadow: 0 5px 15px rgba(0,0,0,.5);
    border: none;
  }

  .modal-header {
    border-bottom: 1px solid #dee2e6;
    background-color: #f8f9fa;
  }

  .modal-footer {
    border-top: 1px solid #dee2e6;
    background-color: #f8f9fa;
  }

  /* Удаляем дублирующиеся стили */
  .warning-modal,
  .warning-modal-content,
  .warning-modal-header,
  .warning-modal-title,
  .warning-modal-body,
  .warning-modal-footer,
  .warning-btn,
  .warning-btn-cancel,
  .warning-btn-continue {
    display: none;
  }

  .login-field {
    border: none !important;
    box-shadow: none !important;
    outline: none !important;
    color: #1890ff !important;
    font-weight: bold !important;
    font-size: 16px !important;
    background: transparent !important;
    padding: 0 !important;
  }

  .login-warning-modal .modal-content {
    border: 2px solid #faad14;
  }

  .login-warning-modal .modal-header {
    background-color: #fffbe6;
    border-bottom: 1px solid #faad14;
  }

  .login-warning-modal .modal-body {
    background-color: #fff;
  }

  .login-warning-modal .modal-footer {
    background-color: #fff;
    border-top: 1px solid #faad14;
  }

  /* Стили для логина */
  .login-field {
    position: relative;
    margin-bottom: 15px;
    border: none;
  }

  .login-field label {
    font-weight: bold;
    color: #333;
  }

  #employeeLogin.empty-login {
    border: none !important;
    background: transparent !important;
    color: #0d6efd !important;
    font-weight: bold !important;
    box-shadow: none !important;
  }

  #employeeLogin.filled-login {
    border: 1px solid #ced4da;
    background: white;
    color: #212529;
    font-weight: normal;
  }

  /* Индикатор загрузки */
  #loadingSpinner {
    display: none;
    text-align: center;
    margin: 20px 0;
  }

  /* Стили для кнопок управления отделами */
  .department-controls {
    margin-left: 10px;
    display: inline-flex;
  }

  .department-controls button {
    padding: 0.25rem 0.5rem;
    margin-right: 5px;
    font-size: 0.75rem;
  }

  /* Стили для поля логина */
  .login-field {
    margin-bottom: 15px;
    position: relative;
  }
  
  .login-field input {
    padding-right: 30px;
    border: 1px solid #ced4da;
    transition: border-color 0.3s;
  }
  
  .empty-login {
    font-style: italic;
    color: #6c757d;
  }
  
  .filled-login {
    font-weight: bold;
    color: #0d6efd;
  }
  
  /* Стили для индикатора загрузки */
  #loadingSpinner {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.8);
    z-index: 9999;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  /* Стили для руководителя отдела */
  .leader-row {
    background-color: #e6f2ff !important;
    font-weight: bold;
  }
  
  .department-section {
    margin-bottom: 20px;
    border: 1px solid #ddd;
    border-radius: 5px;
    overflow: hidden;
  }
  
  .department-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #f8f9fa;
    padding: 10px 15px;
    border-bottom: 1px solid #ddd;
  }
  
  .department-controls {
    display: flex;
    gap: 5px;
  }
  
  .department-controls button {
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 5px 10px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s, color 0.3s;
  }
  
  .department-controls button:hover {
    background-color: #f1f1f1;
    color: #007bff;
  }
  
  .department-controls button i {
    font-size: 14px;
  }
  
  /* Стили для модального окна */
  .modal {
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1050 !important;
  }
  
  .modal-content {
    background-color: #fff;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
    z-index: 1055 !important;
  }
  
  .modal-backdrop {
    z-index: 1040 !important;
  }

  /* Исправленные стили для модальных окон и для поля логина */
  /* Стили модальных окон */
  .modal {
    z-index: 1050;
  }

  .modal-backdrop {
    z-index: 1040;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .modal-content {
    border: none;
    border-radius: 8px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    background-color: #fff;
  }

  .modal-header {
    border-bottom: 1px solid #eaeaea;
    background-color: #f8f9fa;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
  }

  .modal-footer {
    border-top: 1px solid #eaeaea;
    background-color: #f8f9fa;
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;
  }

  /* Стили для предупреждения о смене логина */
  #loginWarningModal .modal-content {
    border-left: 4px solid #ffc107;
  }

  #loginWarningModal .modal-header {
    background-color: #fff3cd;
    color: #856404;
  }

  /* Стили для поля логина */
  .login-field {
    font-weight: bold;
    color: #007bff !important;
    background-color: white !important;
  }

  .filled-login {
    color: #007bff !important;
    font-weight: bold;
  }

  .empty-login {
    font-style: italic;
    color: #6c757d !important;
  }

  /* Стили для подсветки руководителя отдела */
  .leader-row {
    background-color: rgba(13, 110, 253, 0.1) !important;
    border-left: 3px solid #0d6efd !important;
    font-weight: 500;
  }

  .manager-row {
    background-color: rgba(13, 202, 240, 0.1) !important;
  }

  /* Улучшенные стили для кнопок управления отделами */
  .department-controls {
    display: flex;
    gap: 5px;
  }

  .department-controls .btn {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
  }

  .department-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 15px;
    background-color: #f8f9fa;
    border-radius: 4px;
    margin-bottom: 10px;
  }

  /* Улучшим стили для кнопок управления отделами */
  .department-controls {
    display: flex;
    gap: 5px;
    align-items: center;
  }

  .department-controls .btn {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
  }

  .department-controls i {
    cursor: pointer;
    padding: 5px;
    border-radius: 4px;
    transition: background-color 0.2s;
  }

  .department-controls i:hover {
    background-color: rgba(0,0,0,0.1);
  }

  .toggle-department, .move-up, .move-down {
    cursor: pointer;
    transition: color 0.2s;
  }
  
  .toggle-department:hover, .move-up:hover, .move-down:hover {
    color: #0d6efd;
  }

  .department-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 15px;
    background-color: #f8f9fa;
    border-radius: 4px;
    margin-bottom: 10px;
  }

  /* Фиксим стили модальных окон */
  .modal {
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1050;
  }

  .modal-content {
    background-color: #fff;
    z-index: 1060;
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  }

  .modal-backdrop {
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1040;
  }
</style>
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
{% endblock %}

{% block content %}
<!-- Навигационное меню -->
<div class="nav-menu">
    <a href="{{ url_for('admin_routes_unique.personnel') }}" class="active">
        <i class="fas fa-users"></i>
        Активные
    </a>
    <a href="{{ url_for('admin_routes_unique.fired_employees') }}">
        <i class="fas fa-user-times"></i>
        Уволенные
    </a>
    <a href="{{ url_for('admin_routes_unique.personnel_dashboard') }}">
        <i class="fas fa-chart-line"></i>
        Дашборд
    </a>
</div>

<!-- Основной контент -->
<div class="main-content">
    <!-- Статистика -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="stat-card">
                <i class="fas fa-users stat-icon"></i>
                <div class="stat-title">Всего сотрудников</div>
                <div class="stat-value">{{ total_employees }}</div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card">
                <i class="fas fa-user-check stat-icon"></i>
                <div class="stat-title">Активные сотрудники</div>
                <div class="stat-value">{{ active_employees }}</div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card">
                <i class="fas fa-user-times stat-icon"></i>
                <div class="stat-title">Уволенные сотрудники</div>
                <div class="stat-value">{{ fired_employees }}</div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card">
                <i class="fas fa-building stat-icon"></i>
                <div class="stat-title">Отделов</div>
                <div class="stat-value">{{ departments|length }}</div>
            </div>
        </div>
    </div>

    <!-- Поиск и фильтры -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="search-box">
                <i class="fas fa-search"></i>
                <input type="text" class="form-control" id="searchInput" placeholder="Поиск сотрудников...">
            </div>
        </div>
        <div class="col-md-6 text-end">
            <div class="btn-group btn-group-sm">
                <button class="btn btn-primary btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#filtersCollapse" aria-expanded="false" aria-controls="filtersCollapse">
                    <i class="fas fa-filter"></i> Фильтры
                </button>
                <button class="btn btn-success btn-sm" id="addEmployeeButton" type="button" onclick="javascript:const modal = new bootstrap.Modal(document.getElementById('addEmployeeModal')); modal.show();">
                    <i class="fas fa-user-plus"></i> Добавить сотрудника
                </button>
            </div>
        </div>
    </div>

    <!-- Выпадающие фильтры -->
    <div class="collapse mb-4" id="filtersCollapse">
        <div class="card card-body">
            <div class="row">
        <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label">Отделы</label>
                        <select class="form-select" id="departmentFilter" multiple="multiple" style="width: 100%;">
                            <option value="all" selected>Все отделы</option>
                            {% for department in departments %}
                            <option value="{{ department.id }}">{{ department.name }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label">Статус</label>
                        <div class="d-flex gap-2 flex-wrap">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="statusOnline" checked>
                                <label class="form-check-label" for="statusOnline">
                                    <span class="employee-status status-online"></span> Активные
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="statusOffline" checked>
                                <label class="form-check-label" for="statusOffline">
                                    <span class="employee-status status-offline"></span> Неактивные
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Роль</label>
                        <div class="d-flex gap-2 flex-wrap">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="roleLeader" checked>
                                <label class="form-check-label" for="roleLeader">
                                    Руководители
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="roleDeputy" checked>
                                <label class="form-check-label" for="roleDeputy">
                                    Заместители
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="roleUser" checked>
                                <label class="form-check-label" for="roleUser">
                                    Сотрудники
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-end">
                <button class="btn btn-primary btn-sm me-2" id="applyFilters">Применить</button>
                <button class="btn btn-outline-secondary btn-sm" id="resetFilters">Сбросить</button>
            </div>
        </div>
    </div>

    <!-- Список сотрудников по отделам -->
    <div id="departments-container">
        {% for department in departments|sort(attribute='order') %}
        <div class="department-section" data-department-id="{{ department.id }}">
            <div class="department-header">
                <span>{{ department.name }}</span>
                <div class="department-controls">
                    <span class="badge">{{ employees_by_department[department.name]|default([])|length }}</span>
                    <i class="fas fa-chevron-up toggle-department" title="Свернуть/развернуть"></i>
                    <i class="fas fa-arrow-up move-up" title="Переместить вверх" data-id="{{ department.id }}"></i>
                    <i class="fas fa-arrow-down move-down" title="Переместить вниз" data-id="{{ department.id }}"></i>
                </div>
            </div>
            <div class="department-content">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Статус</th>
                                <th>ФИО</th>
                                <th>Должность</th>
                                <th>Корп. телефон</th>
                                <th>Корп. почта</th>
                                <th>Действия</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% if department.name in employees_by_department %}
                                {% set employees = employees_by_department[department.name]|sort(attribute='role', reverse=true) %}
                                {% set leader = employees|selectattr('role', 'equalto', 'leader')|first %}
                                
                                {% if leader %}
                                    <tr class="employee-row leader-row">
                                        <td>{{ leader.id }}</td>
                                        <td>
                                            <span class="employee-status {% if leader.status == 'online' %}status-online{% else %}status-offline{% endif %}"></span>
                                        </td>
                                        <td>{{ leader.full_name }}</td>
                                        <td>{{ leader.position }}</td>
                                        <td>{{ leader.phone }}</td>
                                        <td>{{ leader.corporate_email }}</td>
                                        <td>
                                            <i class="fas fa-edit edit-icon" title="Редактировать" data-bs-toggle="modal" data-bs-target="#editEmployeeModal" data-id="{{ leader.id }}"></i>
                                            <i class="fas fa-user-slash fire-icon" title="Уволить" data-id="{{ leader.id }}"></i>
                                        </td>
                                    </tr>
                                {% endif %}
                                
                                {% for employee in employees if employee.role != 'leader' %}
                                    <tr class="employee-row {% if employee.role == 'manager' %}manager-row{% elif employee.role == 'deputy' %}deputy-row{% endif %}">
                                        <td>{{ employee.id }}</td>
                                        <td>
                                            <span class="employee-status {% if employee.status == 'online' %}status-online{% else %}status-offline{% endif %}"></span>
                                        </td>
                                        <td>{{ employee.full_name }}</td>
                                        <td>{{ employee.position }}</td>
                                        <td>{{ employee.phone }}</td>
                                        <td>{{ employee.corporate_email }}</td>
                                        <td>
                                            <i class="fas fa-edit edit-icon" title="Редактировать" data-bs-toggle="modal" data-bs-target="#editEmployeeModal" data-id="{{ employee.id }}"></i>
                                            <i class="fas fa-user-slash fire-icon" title="Уволить" data-id="{{ employee.id }}"></i>
                                        </td>
                                    </tr>
                                {% endfor %}
                            {% else %}
                                <tr>
                                    <td colspan="7" class="text-center">Нет сотрудников в этом отделе</td>
                                </tr>
                            {% endif %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        {% endfor %}
    </div>
</div>

<!-- Модальное окно для редактирования сотрудника -->
<div class="modal fade" id="editEmployeeModal" tabindex="-1" aria-labelledby="editEmployeeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editEmployeeModalLabel">Редактировать сотрудника</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" style="background-color: #fff; z-index: 1060;">
                <form id="editEmployeeForm">
                    <div class="row">
                        <div class="col-md-12">
                            <h5 class="mt-3 mb-3">Редактирование сотрудника</h5>
                    <input type="hidden" id="editEmployeeId" name="id">
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4">
                            <!-- Основная информация -->
                            <!-- Блок для фото с возможностью загрузки -->
                            <div class="mb-3 text-center">
                                <div id="photoContainer" class="mb-2" style="height: 200px; border: 1px dashed #ccc; display: flex; align-items: center; justify-content: center;">
                                    <img id="employeePhotoPreview" src="" alt="Фото сотрудника" style="max-width: 100%; max-height: 100%; display: none;">
                                    <span id="photoPlaceholder">Нет фото</span>
                                </div>
                                <input type="file" class="form-control form-control-sm" id="employeePhoto" name="employee_photo">
                            </div>
                            
                            <div id="systemLoginContainer" class="mb-2">
                                <label for="editLogin" class="form-label">Логин в системе</label>
                                <input type="text" class="form-control login-field" id="editLogin" name="login">
                            </div>
                            
                            <div class="mb-2">
                                <label for="editFullName" class="form-label">ФИО</label>
                                <input type="text" class="form-control" id="editFullName" name="full_name">
                            </div>
                            <div class="mb-2">
                                <label for="editDepartment" class="form-label">Отдел</label>
                                <select class="form-select" id="editDepartment" name="department_id" required>
                                    {% for department in departments %}
                                    <option value="{{ department.id }}">{{ department.name }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                            <div class="mb-2">
                                <label for="editPosition" class="form-label">Должность</label>
                                <select class="form-select" id="editPosition" name="position" required>
                                    {% for position in positions %}
                                    <option value="{{ position.name }}">{{ position.name }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                            <div class="mb-2">
                                <label for="editRole" class="form-label">Роль</label>
                                <select class="form-select" id="editRole" name="role" required>
                                    <option value="user">Сотрудник</option>
                                    <option value="deputy">Заместитель</option>
                                    <option value="leader">Руководитель</option>
                                    <option value="admin">Администратор</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="col-md-4">
                            <!-- Контактная информация -->
                            <div class="mb-2">
                                <label for="editCorporateNumber" class="form-label">Корпоративный номер</label>
                                <input type="text" class="form-control" id="editCorporateNumber" name="corporate_number">
                            </div>
                            <div class="mb-2">
                                <label for="editPersonalPhone" class="form-label">Личный телефон</label>
                                <input type="text" class="form-control" id="editPersonalPhone" name="phone">
                            </div>
                            <div class="mb-2">
                                <label for="editPreviousNumber" class="form-label">Предыдущий номер</label>
                                <input type="text" class="form-control" id="editPreviousNumber" name="previous_number">
                            </div>
                            <div class="mb-2">
                                <label for="editCorporateEmail" class="form-label">Корпоративная почта</label>
                                <input type="email" class="form-control" id="editCorporateEmail" name="corporate_email">
                            </div>
                            <div class="mb-2">
                                <label for="editPersonalEmail" class="form-label">Личная почта</label>
                                <input type="email" class="form-control" id="editPersonalEmail" name="personal_email">
                            </div>
                            <div class="mb-2">
                                <label for="editLoginPC" class="form-label">Логин ПК</label>
                                <input type="text" class="form-control" id="editLoginPC" name="pc_login">
                            </div>
                            <div class="mb-2">
                                <label for="editPasswordPC" class="form-label">Пароль ПК</label>
                                <input type="text" class="form-control" id="editPasswordPC" name="pc_password">
                            </div>
                            <div class="mb-2">
                                <label for="editCRMId" class="form-label">CRM ID</label>
                                <input type="text" class="form-control" id="editCRMId" name="crm_id">
                            </div>
                        </div>
                        
                        <div class="col-md-4">
                            <!-- Даты и дополнительная информация -->
                            <div class="mb-2">
                                <label for="editHireDate" class="form-label">Дата приема</label>
                                <input type="date" class="form-control" id="editHireDate" name="hire_date">
                            </div>
                            <div class="mb-2 d-none">
                                <label for="editTerminationDate" class="form-label">Дата увольнения</label>
                                <input type="date" class="form-control" id="editTerminationDate" name="termination_date">
                            </div>
                            <div class="mb-2">
                                <label for="editBirthDate" class="form-label">Дата рождения</label>
                                <input type="date" class="form-control" id="editBirthDate" name="birth_date">
                            </div>
                            <div class="mb-2">
                                <label for="editExperience" class="form-label">Стаж работы</label>
                                <input type="text" class="form-control" id="editExperience" name="experience" readonly>
                            </div>
                            
                            <!-- Чекбоксы -->
                            <div class="mb-2">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="editDocuments" name="documents">
                                    <label class="form-check-label" for="editDocuments">Документы</label>
                                </div>
                            </div>
                            <div class="mb-2">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="editRR" name="rr">
                                    <label class="form-check-label" for="editRR">RR</label>
                                </div>
                            </div>
                            <div class="mb-2">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="editSite" name="site">
                                    <label class="form-check-label" for="editSite">Сайт</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Примечания -->
                    <div class="mb-2">
                        <label for="editNotes" class="form-label">Примечания</label>
                        <textarea class="form-control" id="editNotes" name="notes" rows="3"></textarea>
                    </div>

                    <!-- История номеров -->
                    <div class="card mt-3">
                        <div class="card-header">
                            История номеров
                        </div>
                        <div class="card-body">
                            <div id="numberHistory" style="max-height: 100px; overflow-y: auto;">
                                <!-- Здесь будет отображаться история номеров -->
                            </div>
                        </div>
                    </div>

                    <!-- История изменений -->
                    <div class="mt-3">
                        <div class="history-toggle" style="background-color: #0d6efd; color: #fff; padding: 5px 10px; border-radius: 4px; cursor: pointer;">
                            История изменений ↓
                        </div>
                        <div class="history-section" id="historySection" style="display: none;">
                            <input type="text" id="historyFilter" placeholder="Фильтровать по полю" class="form-control mb-2" style="font-size:0.75rem;">
                            <div id="historyEntries" style="max-height: 200px; overflow-y: auto;">
                                <!-- Здесь будут отображаться записи истории -->
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-warning" id="changePasswordBtn">Сменить пароль</button>
                <button type="button" class="btn btn-primary" id="saveEmployeeChanges">Сохранить</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно для увольнения сотрудника -->
<div class="modal fade" id="fireEmployeeModal" tabindex="-1" aria-labelledby="fireEmployeeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="fireEmployeeModalLabel">Увольнение сотрудника</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="fireEmployeeForm">
                    <input type="hidden" id="fireEmployeeId" name="id">
                    <div class="mb-3">
                        <label for="fireDate" class="form-label">Дата увольнения</label>
                        <input type="date" class="form-control" id="fireDate" name="fire_date" value="{{ now.strftime('%Y-%m-%d') }}" required>
                    </div>
                    <div class="mb-3">
                        <label for="fireReason" class="form-label">Причина увольнения</label>
                        <textarea class="form-control" id="fireReason" name="fire_reason" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-danger" id="confirmFireEmployee">Уволить</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно добавления нового сотрудника -->
<div class="modal fade" id="addEmployeeModal" tabindex="-1" aria-labelledby="addEmployeeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEmployeeModalLabel">Добавить нового сотрудника</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addEmployeeForm">
                    <!-- Форма добавления сотрудника -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="addFullName" class="form-label">ФИО</label>
                            <input type="text" class="form-control" id="addFullName" name="full_name" required>
                        </div>
                        <div class="col-md-6">
                            <label for="addDepartment" class="form-label">Отдел</label>
                            <select class="form-select" id="addDepartment" name="department_id" required>
                                <option value="">Выберите отдел</option>
                                {% for department in departments %}
                                <option value="{{ department.id }}">{{ department.name }}</option>
                                {% endfor %}
                            </select>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="addPosition" class="form-label">Должность</label>
                            <select class="form-select" id="addPosition" name="position" required>
                                <option value="">Выберите должность</option>
                                {% for position in positions %}
                                <option value="{{ position.name }}">{{ position.name }}</option>
                                {% endfor %}
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="addRole" class="form-label">Роль в системе</label>
                            <select class="form-select" id="addRole" name="role" required>
                                <option value="">Выберите роль</option>
                                {% for role in roles %}
                                <option value="{{ role.name }}">{{ role.name }}</option>
                                {% endfor %}
                            </select>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="addCorporateEmail" class="form-label">Корпоративная почта</label>
                            <input type="email" class="form-control" id="addCorporateEmail" name="corporate_email">
                        </div>
                        <div class="col-md-6">
                            <label for="addPersonalPhone" class="form-label">Личный телефон</label>
                            <input type="tel" class="form-control" id="addPersonalPhone" name="personal_phone">
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="addLogin" class="form-label">Логин в системе</label>
                            <input type="text" class="form-control" id="addLogin" name="login" placeholder="Будет создан автоматически">
                        </div>
                        <div class="col-md-6">
                            <label for="addPassword" class="form-label">Пароль</label>
                            <div class="input-group">
                                <input type="password" class="form-control" id="addPassword" name="password">
                                <button class="btn btn-outline-secondary toggle-password" type="button" data-target="addPassword">
                                    <i class="fa fa-eye"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="addHireDate" class="form-label">Дата приема на работу</label>
                            <input type="date" class="form-control" id="addHireDate" name="hire_date" required>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" id="saveNewEmployee">Сохранить</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно предупреждения об изменении логина -->
<div class="modal fade login-warning-modal" id="loginWarningModal" tabindex="-1" aria-labelledby="loginWarningModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="loginWarningModalLabel">Внимание! Изменение логина</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="alert alert-warning">Изменение логина может вызвать проблемы с доступом к системе. Не меняйте логин без необходимости!</p>
                <p>Вы уверены, что хотите изменить логин с <strong id="originalLoginDisplay"></strong> на <strong id="newLoginDisplay"></strong>?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="cancelLoginChange()">Отмена</button>
                <button type="button" class="btn btn-primary" onclick="confirmLoginChange()">Продолжить</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно смены пароля -->
<div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="changePasswordModalLabel">
                    <i class="fas fa-key me-2"></i>
                    Сменить пароль
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="changePasswordForm">
                    <input type="hidden" id="passwordEmployeeId" name="employee_id">
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">Новый пароль</label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="newPassword" name="new_password" required>
                            <button class="btn btn-outline-secondary toggle-password" type="button" data-target="newPassword">
                                <i class="fa fa-eye"></i>
                            </button>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Подтвердите пароль</label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="confirmPassword" name="confirm_password" required>
                            <button class="btn btn-outline-secondary toggle-password" type="button" data-target="confirmPassword">
                                <i class="fa fa-eye"></i>
                            </button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Отмена
                </button>
                <button type="button" class="btn btn-primary" id="confirmPasswordChangeBtn" onclick="confirmPasswordChange()">
                    <i class="fas fa-save me-2"></i>Сохранить
                </button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script>
// Расчет стажа работы
function calculateExperience(hireDate) {
    console.log('Вызвана функция calculateExperience с датой:', hireDate);
    if (!hireDate) return '';
    
    try {
        const hire = new Date(hireDate);
        const now = new Date();
        
        let years = now.getFullYear() - hire.getFullYear();
        let months = now.getMonth() - hire.getMonth();
        
        if (months < 0) {
            years--;
            months += 12;
        }
        
        if (years > 0 && months > 0) {
            return `${years} г. ${months} мес.`;
        } else if (years > 0) {
            return `${years} г.`;
        } else if (months > 0) {
            return `${months} мес.`;
        } else {
            const diffTime = Math.abs(now - hire);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            return `${diffDays} дн.`;
        }
    } catch (error) {
        console.error('Ошибка в calculateExperience:', error);
        return '';
    }
}

// Форматирование даты для input
function formatDateForInput(dateObj) {
    console.log('Вызвана функция formatDateForInput:', dateObj);
    if (!dateObj) return '';
    
    try {
        const date = new Date(dateObj);
        return date.toISOString().split('T')[0];
    } catch (error) {
        console.error('Ошибка в formatDateForInput:', error);
        return '';
    }
}

// Функция для обновления UI после изменений
function updateUIAfterChanges() {
    console.log('Вызвана функция updateUIAfterChanges');
    location.reload();
}

// Функция для отображения уведомлений
function showNotification(message, type = 'info') {
    console.log(`Уведомление (${type}):`, message);
    // Существующий код...
}

// Функция для инициализации модальных окон
function initializeModals() {
    console.log('Вызвана функция initializeModals');
    try {
        // Модальное окно добавления сотрудника
        const addEmployeeModal = document.getElementById('addEmployeeModal');
        if (addEmployeeModal) {
            console.log('Инициализация модального окна добавления сотрудника');
            addEmployeeModal.addEventListener('show.bs.modal', function() {
                console.log('Событие show.bs.modal для addEmployeeModal');
                // Очищаем форму при открытии
                const form = document.getElementById('addEmployeeForm');
                if (form) form.reset();
                
                // Инициализируем Select2 для выпадающих списков
                if (typeof $ !== 'undefined' && typeof $.fn.select2 !== 'undefined') {
                    $('#addDepartment, #addPosition, #addRole').select2({
                        theme: 'bootstrap-5',
                        dropdownParent: addEmployeeModal
                    });
                } else {
                    console.error('jQuery или Select2 не загружены');
                }
            });
        } else {
            console.warn('Модальное окно addEmployeeModal не найдено');
        }
        
        // Модальное окно редактирования сотрудника
        const editEmployeeModal = document.getElementById('editEmployeeModal');
        if (editEmployeeModal) {
            console.log('Инициализация модального окна редактирования сотрудника');
            editEmployeeModal.addEventListener('show.bs.modal', function(event) {
                console.log('Событие show.bs.modal для editEmployeeModal');
                const button = event.relatedTarget;
                if (button) {
                    const employeeId = button.getAttribute('data-id');
                    if (employeeId) {
                        loadEmployeeDataForEdit(employeeId);
                    } else {
                        console.warn('Атрибут data-id не найден в кнопке');
                    }
                } else {
                    console.warn('event.relatedTarget не определен');
                }
            });
        } else {
            console.warn('Модальное окно editEmployeeModal не найдено');
        }
        
        // Модальное окно предупреждения об изменении логина
        const loginWarningModal = document.getElementById('loginWarningModal');
        if (loginWarningModal) {
            console.log('Инициализация модального окна предупреждения о смене логина');
            loginWarningModal.addEventListener('show.bs.modal', function() {
                console.log('Событие show.bs.modal для loginWarningModal');
                const loginField = document.querySelector('input[name="login"]');
                if (loginField) {
                    const originalLogin = loginField.getAttribute('data-original-value') || loginField.defaultValue;
                    const newLogin = loginField.value;
                    
                    const originalDisplay = document.getElementById('originalLoginDisplay');
                    const newDisplay = document.getElementById('newLoginDisplay');
                    
                    if (originalDisplay) originalDisplay.textContent = originalLogin;
                    if (newDisplay) newDisplay.textContent = newLogin;
                } else {
                    console.warn('Поле логина не найдено');
                }
            });
            
            loginWarningModal.addEventListener('hidden.bs.modal', function() {
                console.log('Событие hidden.bs.modal для loginWarningModal');
                const loginField = document.querySelector('input[name="login"]');
                if (loginField && !loginField.hasAttribute('data-confirmed')) {
                    loginField.value = loginField.getAttribute('data-original-value') || '';
                }
            });
        } else {
            console.warn('Модальное окно loginWarningModal не найдено');
        }
    } catch (error) {
        console.error('Ошибка в initializeModals:', error);
    }
}

// Функция для настройки фильтров
function setupFilters() {
    console.log('Вызвана функция setupFilters');
    try {
        // Обработчик для строки поиска
        const searchInput = document.getElementById('employeeSearch');
        if (searchInput) {
            console.log('Настройка обработчика для поля поиска');
            searchInput.addEventListener('input', function() {
                console.log('Ввод в поле поиска');
                applyFilters();
            });
        } else {
            console.warn('Поле поиска не найдено (employeeSearch)');
        }
        
        // Обработчики для кнопок фильтров
        const filterButtons = document.querySelectorAll('.filter-button');
        console.log('Найдено кнопок фильтров:', filterButtons.length);
        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                console.log('Нажата кнопка фильтра:', this.textContent);
                this.classList.toggle('active');
                applyFilters();
            });
        });
        
        // Кнопка сброса фильтров
        const resetButton = document.getElementById('resetFilters');
        if (resetButton) {
            console.log('Настройка кнопки сброса фильтров');
            resetButton.addEventListener('click', function() {
                console.log('Нажата кнопка сброса фильтров');
                const searchInput = document.getElementById('employeeSearch');
                if (searchInput) searchInput.value = '';
                
                document.querySelectorAll('.filter-button').forEach(button => {
                    button.classList.remove('active');
                });
                
                applyFilters();
            });
        } else {
            console.warn('Кнопка сброса фильтров не найдена (resetFilters)');
        }
    } catch (error) {
        console.error('Ошибка в setupFilters:', error);
    }
}

// Функция применения фильтров
function applyFilters() {
    console.log('Вызвана функция applyFilters');
    try {
        const searchInput = document.getElementById('searchInput');
        const searchText = searchInput ? searchInput.value.toLowerCase() : '';
        
        const showDismissed = document.querySelector('.filter-button[data-filter="dismissed"]')?.classList.contains('active') || false;
        const showVacation = document.querySelector('.filter-button[data-filter="vacation"]')?.classList.contains('active') || false;
        
        console.log('Параметры фильтрации:', { searchText, showDismissed, showVacation });
        
        // Для каждого сотрудника
        const employeeRows = document.querySelectorAll('.employee-row');
        console.log('Найдено строк сотрудников:', employeeRows.length);
        
        employeeRows.forEach(row => {
            const employeeName = row.querySelector('.employee-name')?.textContent.toLowerCase() || '';
            const employeePosition = row.querySelector('.employee-position')?.textContent.toLowerCase() || '';
            const isDismissed = row.classList.contains('dismissed');
            const isVacation = row.classList.contains('vacation');
            
            const showBySearch = !searchText || employeeName.includes(searchText) || employeePosition.includes(searchText);
            const showByDismissed = !isDismissed || showDismissed;
            const showByVacation = !isVacation || showVacation;
            
            if (showBySearch && showByDismissed && showByVacation) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
        
        // Проверяем, если в отделе не осталось видимых сотрудников, скрываем отдел
        const departmentSections = document.querySelectorAll('.department-section');
        console.log('Найдено секций отделов:', departmentSections.length);
        
        departmentSections.forEach(section => {
            const visibleEmployees = Array.from(section.querySelectorAll('.employee-row')).filter(row => row.style.display !== 'none').length;
            if (visibleEmployees === 0) {
                section.style.display = 'none';
            } else {
                section.style.display = '';
            }
        });
    } catch (error) {
        console.error('Ошибка в applyFilters:', error);
    }
}

// Функция для определения является ли сотрудник руководителем отдела
function isLeaderRole(role) {
    if (!role) return false;
    
    try {
        // Текстовое обозначение
        if (typeof role === 'string' && 
            (role.toLowerCase() === 'leader' || 
             role.toLowerCase() === 'руководитель' || 
             role.toLowerCase().includes('руководител'))) {
            return true;
        }
        
        // Числовое обозначение (2 = руководитель)
        if ((typeof role === 'number' && role === 2) || 
            (typeof role === 'string' && (role === '2' || role === '2.0'))) {
            return true;
        }
        
        return false;
    } catch (error) {
        console.error('Ошибка в isLeaderRole:', error);
        return false;
    }
}

// Функция для преобразования строкового или числового значения роли в текстовое описание
function getRoleDisplayName(role) {
    console.log('Вызвана функция getRoleDisplayName:', role);
    try {
        if (!role) return 'Не указана';
        
        if (isLeaderRole(role)) {
            return 'Руководитель';
        }
        
        // Другие преобразования ролей
        const roleMap = {
            '1': 'Администратор',
            'admin': 'Администратор',
            '3': 'Менеджер',
            'manager': 'Менеджер',
            '4': 'Сотрудник',
            'employee': 'Сотрудник',
            '5': 'HR',
            'hr': 'HR'
        };
        
        return roleMap[role] || role;
    } catch (error) {
        console.error('Ошибка в getRoleDisplayName:', error);
        return String(role);
    }
}

// Функция для обновления отображения роли во всех строках сотрудников
function updateRoleDisplay() {
    console.log('Вызвана функция updateRoleDisplay');
    try {
        const employeeRows = document.querySelectorAll('.employee-row');
        console.log('Найдено строк сотрудников для обновления ролей:', employeeRows.length);
        
        employeeRows.forEach(row => {
            const roleValue = row.getAttribute('data-role');
            const isLeader = isLeaderRole(roleValue);
            
            // Добавляем атрибут для обозначения руководителя
            if (isLeader) {
                row.setAttribute('data-is-leader', 'true');
                row.classList.add('leader-row');
                row.style.backgroundColor = '#e6f7ff';
            } else {
                row.setAttribute('data-is-leader', 'false');
            }
            
            // Обновляем отображаемое название роли
            const roleCell = row.querySelector('.role-display');
            if (roleCell) {
                roleCell.textContent = getRoleDisplayName(roleValue);
            }
        });
    } catch (error) {
        console.error('Ошибка в updateRoleDisplay:', error);
    }
}

// Функция для инициализации обработчиков кнопок отделов
function initDepartmentControls() {
    console.log('Вызвана функция initDepartmentControls');
    try {
        // Добавляем обработчики для кнопок перемещения отделов
        const moveButtons = document.querySelectorAll('.move-department-up, .move-department-down');
        console.log('Найдено кнопок перемещения отделов:', moveButtons.length);
        
        moveButtons.forEach(button => {
            button.addEventListener('click', function() {
                console.log('Нажата кнопка перемещения отдела');
                const direction = this.classList.contains('move-department-up') ? 'up' : 'down';
                const departmentId = this.closest('.department-container')?.getAttribute('data-department-id');
                
                if (departmentId) {
                    handleDepartmentMove(direction, departmentId);
                } else {
                    console.warn('Не удалось найти ID отдела для перемещения');
                }
            });
        });
        
        // Добавляем обработчики для сворачивания/разворачивания отделов
        const toggleButtons = document.querySelectorAll('.toggle-department');
        console.log('Найдено кнопок сворачивания отделов:', toggleButtons.length);
        
        toggleButtons.forEach(toggle => {
            toggle.addEventListener('click', function() {
                console.log('Нажата кнопка сворачивания отдела');
                const container = this.closest('.department-container');
                
                if (!container) {
                    console.warn('Не найден контейнер отдела');
                    return;
                }
                
                const departmentId = container.getAttribute('data-department-id');
                const table = container.querySelector('.department-table');
                const icon = this.querySelector('i');
                
                if (!table || !icon) {
                    console.warn('Не найдена таблица или иконка отдела');
                    return;
                }
                
                if (table.style.display === 'none') {
                    table.style.display = '';
                    icon.classList.remove('fa-chevron-down');
                    icon.classList.add('fa-chevron-up');
                    saveDepartmentState(departmentId, 'expanded');
                } else {
                    table.style.display = 'none';
                    icon.classList.remove('fa-chevron-up');
                    icon.classList.add('fa-chevron-down');
                    saveDepartmentState(departmentId, 'collapsed');
                }
            });
        });
    } catch (error) {
        console.error('Ошибка в initDepartmentControls:', error);
    }
}

// Сохраняем состояние отдела (свернут/развернут)
function saveDepartmentState(departmentId, state) {
    console.log('Вызвана функция saveDepartmentState:', { departmentId, state });
    try {
        if (!departmentId) {
            console.warn('ID отдела не указан');
            return;
        }
        
        const states = JSON.parse(localStorage.getItem('departmentStates') || '{}');
        states[departmentId] = state;
        localStorage.setItem('departmentStates', JSON.stringify(states));
    } catch (error) {
        console.error('Ошибка в saveDepartmentState:', error);
    }
}

// Восстанавливаем состояние отделов
function restoreDepartmentState() {
    console.log('Вызвана функция restoreDepartmentState');
    try {
        const states = JSON.parse(localStorage.getItem('departmentStates') || '{}');
        console.log('Загружены состояния отделов:', states);
        
        Object.keys(states).forEach(departmentId => {
            const departmentSection = document.querySelector(`.department-container[data-department-id="${departmentId}"]`);
            if (!departmentSection) {
                console.warn(`Отдел с ID ${departmentId} не найден`);
                return;
            }
            
            const table = departmentSection.querySelector('.department-table');
            const collapseButton = departmentSection.querySelector('.toggle-department');
            const icon = collapseButton?.querySelector('i');
            
            if (states[departmentId] === 'collapsed' && table && icon) {
                console.log(`Сворачиваем отдел ${departmentId}`);
                table.style.display = 'none';
                icon.classList.remove('fa-chevron-up');
                icon.classList.add('fa-chevron-down');
            }
        });
    } catch (error) {
        console.error('Ошибка в restoreDepartmentState:', error);
    }
}

// Обработка перемещения отдела
function handleDepartmentMove(direction, departmentId) {
    console.log('Вызвана функция handleDepartmentMove:', { direction, departmentId });
    try {
        const departmentSection = document.querySelector(`.department-container[data-department-id="${departmentId}"]`);
        if (!departmentSection) {
            console.warn(`Отдел с ID ${departmentId} не найден`);
            return;
        }
        
        const container = departmentSection.parentNode;
        const departments = Array.from(container.children);
        const index = departments.indexOf(departmentSection);
        
        if (direction === 'up' && index > 0) {
            console.log(`Перемещаем отдел ${departmentId} вверх`);
            container.insertBefore(departmentSection, departments[index - 1]);
            saveDepartmentOrder();
        } else if (direction === 'down' && index < departments.length - 1) {
            console.log(`Перемещаем отдел ${departmentId} вниз`);
            container.insertBefore(departments[index + 1], departmentSection);
            saveDepartmentOrder();
        } else {
            console.warn(`Невозможно переместить отдел ${departmentId} ${direction}`);
        }
    } catch (error) {
        console.error('Ошибка в handleDepartmentMove:', error);
    }
}

// Сохраняем порядок отделов
function saveDepartmentOrder() {
    console.log('Вызвана функция saveDepartmentOrder');
    try {
        const order = [];
        document.querySelectorAll('.department-container').forEach(function(section) {
            const id = section.getAttribute('data-department-id');
            if (id) order.push(id);
        });
        
        console.log('Сохраняем порядок отделов:', order);
        localStorage.setItem('departmentOrder', JSON.stringify(order));
    } catch (error) {
        console.error('Ошибка в saveDepartmentOrder:', error);
    }
}

// Восстанавливаем порядок отделов
function restoreDepartmentOrder() {
    console.log('Вызвана функция restoreDepartmentOrder');
    try {
        const savedOrder = JSON.parse(localStorage.getItem('departmentOrder') || '[]');
        console.log('Загружен порядок отделов:', savedOrder);
        
        if (savedOrder.length === 0) {
            console.log('Сохраненный порядок отделов пуст');
            return;
        }
        
        const container = document.querySelector('.departments-container');
        if (!container) {
            console.warn('Контейнер отделов не найден');
            return;
        }
        
        savedOrder.forEach(departmentId => {
            const departmentSection = document.querySelector(`.department-container[data-department-id="${departmentId}"]`);
            if (departmentSection) {
                console.log(`Перемещаем отдел ${departmentId} в конец списка`);
                container.appendChild(departmentSection);
            } else {
                console.warn(`Отдел с ID ${departmentId} не найден`);
            }
        });
    } catch (error) {
        console.error('Ошибка в restoreDepartmentOrder:', error);
    }
}

// Функция для сортировки сотрудников, чтобы руководители были первыми
function sortAndUpdateEmployees() {
    console.log('Вызвана функция sortAndUpdateEmployees');
    try {
        const departmentSections = document.querySelectorAll('.department-section');
        console.log('Найдено секций отделов для сортировки:', departmentSections.length);
        
        departmentSections.forEach(section => {
            const employeesList = section.querySelector('.employees-list') || section.querySelector('.department-table');
            if (!employeesList) {
                console.warn('Список сотрудников не найден в отделе');
                return;
            }
            
            const employees = Array.from(employeesList.querySelectorAll('.employee-row'));
            console.log(`Найдено ${employees.length} сотрудников для сортировки в отделе`);
            
            // Сортируем сотрудников: сначала руководители, потом остальные
            employees.sort((a, b) => {
                const aIsLeader = a.getAttribute('data-is-leader') === 'true' || 
                                  a.classList.contains('leader-row') ||
                                  a.getAttribute('data-role') === 'leader' ||
                                  a.getAttribute('data-role') === '2';
                
                const bIsLeader = b.getAttribute('data-is-leader') === 'true' || 
                                  b.classList.contains('leader-row') ||
                                  b.getAttribute('data-role') === 'leader' ||
                                  b.getAttribute('data-role') === '2';
                
                if (aIsLeader && !bIsLeader) return -1;
                if (!aIsLeader && bIsLeader) return 1;
                return 0;
            });
            
            // Перемещаем элементы в отсортированном порядке
            employees.forEach(employee => {
                employeesList.appendChild(employee);
            });
            
            console.log(`Отсортировано ${employees.length} сотрудников в отделе`);
        });
    } catch (error) {
        console.error('Ошибка в sortAndUpdateEmployees:', error);
    }
}

// Инициализация всех обработчиков событий при загрузке страницы
document.addEventListener('DOMContentLoaded', function() {
    console.log('⭐ DOMContentLoaded: Инициализация страницы персонала');
    
    try {
        // Проверка наличия jQuery
        if (typeof jQuery === 'undefined') {
            console.error('jQuery не загружен!');
            alert('Ошибка: jQuery не загружен. Функциональность может быть ограничена.');
        } else {
            console.log('jQuery загружен, версия:', jQuery.fn.jquery);
        }
        
        // Инициализируем обработчики для отделов
        initDepartmentControls();
        
        // Инициализируем обработчики для фильтров
        setupFilters();
        
        // Инициализация модальных окон
        initializeModals();
        
        // Восстанавливаем состояние и порядок отделов
        restoreDepartmentState();
        restoreDepartmentOrder();
        
        // Обновляем отображение ролей
        updateRoleDisplay();
        
        // Сортируем сотрудников
        sortAndUpdateEmployees();
        
        // Инициализация обработчиков для кнопок редактирования
        document.querySelectorAll('.edit-icon').forEach(icon => {
            icon.addEventListener('click', function() {
                console.log('Нажата кнопка редактирования');
                const employeeId = this.getAttribute('data-id');
                loadEmployeeDataForEdit(employeeId);
            });
        });
        
        // Обработчик для кнопки добавления сотрудника
        const addEmployeeBtn = document.getElementById('addEmployeeBtn');
        if (addEmployeeBtn) {
            addEmployeeBtn.addEventListener('click', function() {
                console.log('Нажата кнопка "Добавить сотрудника"');
                // Очищаем форму
                const form = document.getElementById('addEmployeeForm');
                if (form) form.reset();
                
                // Устанавливаем текущую дату в поле даты приема на работу
                const today = new Date();
                const formattedDate = formatDateForInput(today);
                const hireDateInput = document.getElementById('addHireDate');
                if (hireDateInput) hireDateInput.value = formattedDate;
            });
        }
        
        // Обработчик для кнопки сохранения нового сотрудника
        const saveNewEmployeeBtn = document.getElementById('saveNewEmployee');
        if (saveNewEmployeeBtn) {
            saveNewEmployeeBtn.addEventListener('click', function() {
                console.log('Нажата кнопка сохранения нового сотрудника');
                addNewEmployee();
            });
        }
        
        // Кнопка подтверждения изменения логина
        const confirmLoginChangeBtn = document.getElementById('confirmLoginChange');
        if (confirmLoginChangeBtn) {
            confirmLoginChangeBtn.addEventListener('click', confirmLoginChange);
        }
        
        // Кнопка отмены изменения логина
        const cancelLoginChangeBtn = document.getElementById('cancelLoginChange');
        if (cancelLoginChangeBtn) {
            cancelLoginChangeBtn.addEventListener('click', cancelLoginChange);
        }
        
        console.log('✅ Инициализация страницы персонала завершена успешно');
    } catch (error) {
        console.error('❌ Критическая ошибка при инициализации страницы:', error);
        alert('Произошла ошибка при инициализации страницы. Пожалуйста, перезагрузите страницу.');
    }
});

// ... остальные функции без изменений ...
</script>
{% endblock %}