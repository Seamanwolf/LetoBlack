# filter_utils.py

import time
from playwright.sync_api import sync_playwright


ATS_URL = "https://leto.megapbx.ru/#/"
ATS_LOGIN = "admin@leto.megapbx.ru"
ATS_PASSWORD = "AaSs2023@"

ATS_LOGIN_SELECTOR = "input.input.autocomplete[type='text']"
ATS_PASSWORD_SELECTOR = "input.input.password.autocomplete[type='password']"
ATS_LOGIN_BUTTON_SELECTOR = "button.itl-button.mr-x2.primary"
ATS_HISTORY_SELECTOR = "[data-qa='history']"

# –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∞–π—Ç–∞ => –∫–æ–¥—ã
CATEGORY_TO_CODE = {
    "–í—Ç–æ—Ä–∏—á–∫–∏": "–í",
    "–ó–∞–≥–æ—Ä–æ–¥–Ω–∞—è –∫–æ–º–º–µ—Ä—Ü–∏—è": "–ó–ö"
}

def normalize_sim_number(sim_number: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –∫ —Ñ–æ—Ä–º–∞—Ç—É –±–µ–∑ –≤–µ–¥—É—â–∏—Ö +7 –∏–ª–∏ 8.
    –ü—Ä–∏–º–µ—Ä:
      +79001234567 => 9001234567
      89001234567  => 9001234567
      79001234567  => 9001234567
    –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
    """
    digits = ''.join(ch for ch in sim_number if ch.isdigit())
    # digits –º–æ–∂–µ—Ç –±—ã—Ç—å '79001234567' (11 —Ü–∏—Ñ—Ä)
    if len(digits) == 11:
        if digits[0] in ('7', '8'):
            return digits[1:]  # –æ—Ç—Ä–µ–∑–∞–µ–º –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É => 9001234567
        else:
            return digits  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    elif len(digits) == 10:
        # –∏–Ω–æ–≥–¥–∞ –º–æ–≥—É—Ç –±—ã—Ç—å 10 —Ü–∏—Ñ—Ä –±–µ–∑ 7
        return digits
    return ''  # –æ—à–∏–±–∫–∞

def update_ats_filter(category: str, employee_name: str, department: str, sim_number: str):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç Playwright, –ª–æ–≥–∏–Ω–∏—Ç—Å—è –≤ ATS, –Ω–∞—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä, 
    —Å—Ç–∞–≤–∏—Ç SIM –≤ —á–µ–∫–±–æ–∫—Å. 
    category: '–í—Ç–æ—Ä–∏—á–∫–∏' –∏–ª–∏ '–ó–∞–≥–æ—Ä–æ–¥–Ω–∞—è –∫–æ–º–º–µ—Ä—Ü–∏—è' => '–í'/'–ó–ö'
    employee_name: (–¥–ª—è –ª–æ–≥–æ–≤)
    department: (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫—É —Ñ–∏–ª—å—Ç—Ä–∞)
    sim_number: '89001234567', '79001234567'...
    """

    def log(message: str):
        print(message)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å

    # –ù–∞—á–∞–ª–æ –ª–æ–≥–∏–∫–∏
    log("üöÄ –ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ (update_ats_filter)")
    print("[update_ats_filter] –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ update_ats_filter")
    # 1) –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ –∏–∑ CATEGORY_TO_CODE
    filter_code = CATEGORY_TO_CODE.get(category, None)
    if not filter_code:
        raise ValueError(f"[update_ats_filter] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
    log(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞: {filter_code} –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}") 
    print(f"[update_ats_filter] –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞: {filter_code} –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")

    # 2) –ü—Ä–∏–≤–æ–¥–∏–º sim_number –∫ –≤–∏–¥—É 9001234567
    log("üìû –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ sim_number -> normalized_sim")
    normalized_sim = normalize_sim_number(sim_number)
    if not normalized_sim:
        raise ValueError(f"[update_ats_filter] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ SIM: '{sim_number}'")

    target_filter_text = f"–ê–≤–∏—Ç–æ –ü—Ä–æ {department} ({filter_code})"
    log(f"üîß –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω target_filter_text: '{target_filter_text}'")
    print(f"[update_ats_filter] target_filter_text —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: '{target_filter_text}'")
    log(f"‚ÑπÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: category={category}, code={filter_code}, " f"employee={employee_name}, dept={department}, sim={sim_number} => normalized={normalized_sim}")
    print(f"[update_ats_filter] –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: category={category}, code={filter_code}, employee={employee_name}, dept={department}, sim={sim_number} => normalized={normalized_sim}")

    with sync_playwright() as p:
        log("üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ Chromium –≤ headless-—Ä–µ–∂–∏–º–µ...")
        print("[update_ats_filter] –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞")
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()

        # 3) –õ–æ–≥–∏–Ω–∏–º—Å—è
        log("üë§ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ATS...")
        print("[update_ats_filter] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ATS")
        page.goto(ATS_URL)
        log("‚å®Ô∏è –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è...")
        print("[update_ats_filter] –ö–ª–∏–∫ –ø–æ –ø–æ–ª—é –ª–æ–≥–∏–Ω–∞")
        page.click(ATS_LOGIN_SELECTOR)
        print("[update_ats_filter] –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞")
        page.type(ATS_LOGIN_SELECTOR, ATS_LOGIN, delay=100)
        print("[update_ats_filter] –ö–ª–∏–∫ –ø–æ –ø–æ–ª—é –ø–∞—Ä–æ–ª—è")
        page.click(ATS_PASSWORD_SELECTOR)
        print("[update_ats_filter] –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è")
        page.type(ATS_PASSWORD_SELECTOR, ATS_PASSWORD, delay=100)
        log("üîì –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞...")
        print("[update_ats_filter] –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞")
        page.click(ATS_LOGIN_BUTTON_SELECTOR)
        page.wait_for_load_state("networkidle")
        time.sleep(2)
        log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        print("[update_ats_filter] –õ–æ–≥–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω")

        # 4) –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ "–ò—Å—Ç–æ—Ä–∏—é"
        log("üìã –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª '–ò—Å—Ç–æ—Ä–∏—è'...")
        print("[update_ats_filter] –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª '–ò—Å—Ç–æ—Ä–∏—è'")
        page.click(ATS_HISTORY_SELECTOR)
        page.wait_for_timeout(1000)

        # 5) –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if page.is_visible("button:has-text('–§–∏–ª—å—Ç—Ä—ã')"):
            log("üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
            print("[update_ats_filter] –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ '–§–∏–ª—å—Ç—Ä—ã'")
            page.click("button:has-text('–§–∏–ª—å—Ç—Ä—ã')")
            page.wait_for_timeout(500)
        else:
            log("‚ùó –ö–Ω–æ–ø–∫–∞ '–§–∏–ª—å—Ç—Ä—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–Ω–µ–≤–∏–¥–∏–º–∞)")
            print("[update_ats_filter] –ö–Ω–æ–ø–∫–∞ '–§–∏–ª—å—Ç—Ä—ã' –Ω–µ –≤–∏–¥–Ω–∞")

        # 6) "–í—Å–µ –Ω–æ–º–µ—Ä–∞"
        log("üì± –ö–ª–∏–∫–∞–µ–º –ø–æ '–í—Å–µ –Ω–æ–º–µ—Ä–∞'")
        print("[update_ats_filter] –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É '–í—Å–µ –Ω–æ–º–µ—Ä–∞'")
        page.click("span.label-wrapper:has(span.label:text('–í—Å–µ –Ω–æ–º–µ—Ä–∞'))")
        page.wait_for_timeout(500)

        # 7) –ü–µ—á–∞—Ç–∞–µ–º target_filter_text
        log(f"‚å®Ô∏è –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞: {target_filter_text}")
        print(f"[update_ats_filter] –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞: {target_filter_text}")
        page.keyboard.type(target_filter_text, delay=100)
        page.wait_for_timeout(500)

        # 8) –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Ñ–∏–ª—å—Ç—Ä–∞
        log(f"üîé –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Å —Ç–µ–∫—Å—Ç–æ–º: '{target_filter_text}'")
        print(f"[update_ats_filter] –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Å —Ç–µ–∫—Å—Ç–æ–º: {target_filter_text}")
        filter_elements = page.locator(f"text={target_filter_text}").element_handles()
        if not filter_elements:
            raise ValueError(f"[update_ats_filter] ‚ùå –§–∏–ª—å—Ç—Ä '{target_filter_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        target_element = None
        for handle in filter_elements:
            text_content = handle.inner_text().strip()
            log(f"üîé –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º: '{text_content}'")
            print(f"[update_ats_filter] –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º: '{text_content}'")
            if text_content == target_filter_text:
                target_element = handle
                log("‚úÖ –≠–ª–µ–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–ª —Å target_filter_text")
                print("[update_ats_filter] –≠–ª–µ–º–µ–Ω—Ç —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å target_filter_text")
                break
        if not target_element:
            target_element = filter_elements[0]
            log("‚ùó –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç")
            print("[update_ats_filter] –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç")

        li_element = target_element.evaluate_handle("node => node.closest('li.item')")
        if not li_element:
            raise ValueError("[update_ats_filter] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ <li> –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞.")
        log("‚úÖ –ù–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç <li> –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞")
        print("[update_ats_filter] –ù–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç <li> –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞")

        # 8.1) –ò—Å–ø–æ–ª—å–∑—É–µ–º Locator –¥–ª—è –∑–Ω–∞—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        log("‚öôÔ∏è –ò—â–µ–º –∑–Ω–∞—á–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∏–ª—å—Ç—Ä–∞...")
        print("[update_ats_filter] –ü–æ–∏—Å–∫ –∑–Ω–∞—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞")
        settings_icon_locator = page.locator("div.itl-setup div.svg-settings-24.table-clickable")
        settings_icon_locator.first.wait_for(state="visible")
        log("‚úÖ –ó–Ω–∞—á–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–π–¥–µ–Ω, –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–µ–º—É")
        print("[update_ats_filter] –ó–Ω–∞—á–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–ª–∏–∫")

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –≤–∏–¥–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤–∏–¥–µ–Ω
        settings_icon_locator.first.scroll_into_view_if_needed()

        # –ö–ª–∏–∫–∞–µ–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
        settings_icon_locator.first.click()

        # 9) –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SIM –≤ —Ñ–∏–ª—å—Ç—Ä–µ
        log("‚åõ –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ñ–∏–ª—å—Ç—Ä–∞")
        print("[update_ats_filter] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ñ–∏–ª—å—Ç—Ä–∞")
        page.wait_for_selector("input.search")
        log("üîé –ö–ª–∏–∫ –ø–æ –ø–æ–ª—é –ø–æ–∏—Å–∫–∞ –¥–ª—è SIM")
        print("[update_ats_filter] –ö–ª–∏–∫ –ø–æ –ø–æ–ª—é –ø–æ–∏—Å–∫–∞")
        page.click("input.search")
        log(f"‚å®Ô∏è –í–≤–æ–¥–∏–º normalized_sim: {normalized_sim}")
        print(f"[update_ats_filter] –í–≤–æ–¥ normalized_sim: {normalized_sim}")
        page.type("input.search", normalized_sim, delay=100)
        page.wait_for_timeout(500)

        # 10) –ü–æ–∏—Å–∫ —á–µ–∫–±–æ–∫—Å–∞ –ø–æ SIM
        log("üîé –ò—â–µ–º li.item –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ–∫–±–æ–∫—Å–∞")
        print("[update_ats_filter] –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ li.item –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ–∫–±–æ–∫—Å–∞")
        li_items = page.query_selector_all("li.item")
        target_li = None
        for li in li_items:
            li_text = li.inner_text().lower()
            log(f"‚è© –ü—Ä–æ–≤–µ—Ä–∫–∞ li.item —Å —Ç–µ–∫—Å—Ç–æ–º: {li_text}")
            print(f"[update_ats_filter] –ü—Ä–æ–≤–µ—Ä–∫–∞ li.item —Å —Ç–µ–∫—Å—Ç–æ–º: {li_text}")
            if "–Ω–æ–º–µ—Ä" not in li_text and "—Ä–µ–≥–∏–æ–Ω" not in li_text:
                target_li = li
                log("‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞")
                print("[update_ats_filter] –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞")
                break

        if not target_li:
            raise ValueError("[update_ats_filter] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ SIM.")

        li_classes = target_li.get_attribute("class") or ""
        if "active" in li_classes:
            log("‚ö†Ô∏è –ß–µ–∫–±–æ–∫—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–∞ —É—Ä–æ–≤–Ω–µ <li>), –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            print("[update_ats_filter] –ß–µ–∫–±–æ–∫—Å —É–∂–µ –æ—Ç–º–µ—á–µ–Ω (–Ω–∞ —É—Ä–æ–≤–Ω–µ <li>), –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        else:
            checkbox_input = target_li.query_selector("input[type='checkbox']")
            if checkbox_input:
                input_classes = checkbox_input.get_attribute("class") or ""
                if "checked" in input_classes:
                    log("‚ö†Ô∏è –ß–µ–∫–±–æ–∫—Å —É–∂–µ –æ—Ç–º–µ—á–µ–Ω (–Ω–∞ —É—Ä–æ–≤–Ω–µ <input>), –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                    print("[update_ats_filter] –ß–µ–∫–±–æ–∫—Å —É–∂–µ –æ—Ç–º–µ—á–µ–Ω (–Ω–∞ —É—Ä–æ–≤–Ω–µ <input>), –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                else:
                    checkbox_label = target_li.query_selector("label.itl-checkbox")
                    if checkbox_label:
                        log("‚úÖ –ö–ª–∏–∫–∞–µ–º –ø–æ label —á–µ–∫–±–æ–∫—Å–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SIM")
                        print("[update_ats_filter] –ö–ª–∏–∫ –ø–æ label —á–µ–∫–±–æ–∫—Å–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SIM")
                        checkbox_label.click(force=True)
                        page.wait_for_timeout(500)
                        log(f"‚úÖ –ß–µ–∫–±–æ–∫—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è SIM: {normalized_sim}")
                        print("[update_ats_filter] –ß–µ–∫–±–æ–∫—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è SIM:", normalized_sim)
                    else:
                        raise ValueError("[update_ats_filter] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ label —á–µ–∫–±–æ–∫—Å–∞.")
            else:
                raise ValueError("[update_ats_filter] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ checkbox_input –≤ target_li")

        # 11) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        print("[update_ats_filter] –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'")
        page.click("button:has-text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')")
        page.wait_for_timeout(500)

        browser.close()
        log(f"‚úÖ –§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {employee_name} (SIM: {normalized_sim})")
        print(f"[update_ats_filter] –§–∏–ª—å—Ç—Ä '{target_filter_text}' –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name}, sim={normalized_sim}.")
